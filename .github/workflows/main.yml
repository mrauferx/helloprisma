name: Build - Scan - Deploy Workflow
on:
#  push:
#    branches:
#      - main
  workflow_dispatch:
    #inputs:
    #  logLevel:
    #    description: 'Log level'
    #    required: false
    #    default: 'warning'
    #  environment:
    #    description: 'Environment to deploy'
    #    required: false
    #    default: 'staging'
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CORTEX_CLI_VERSION: 0.13.0
      JAVA_HOME: JAVA_HOME_11_X64
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      # required for scanning JavaScript when using CLI scanner
      #- name: Set up Node.js
      #  uses: actions/setup-node@v4
      #  with: 
      #    node-version: 22
      
      # node is already installed in runner ...
      #- name: Verify Node.js Version
      #  run: node -v

      # required if using Docker scanner image
      #- name: Get Temporary Token
      #  run: |
      #    TOKEN_RESPONSE=$(curl --location "${{ secrets.CORTEX_API_URL }}/public_api/v1/unified-cli/image/token" \
      #      --header "Authorization: ${{ secrets.CORTEX_API_KEY }}" \
      #      --header "x-xdr-auth-id: ${{ secrets.CORTEX_API_KEY_ID }}" \
      #      --header 'Content-Type: application/json' \
      #      --data '{}')
      #    TEMP_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.token')
      #    echo "TEMP_TOKEN=$TEMP_TOKEN" >> $GITHUB_ENV

      # required if using Docker scanner image
      #- name: Pull Scanner Image
      #  run: |
      #    docker pull distributions.traps.paloaltonetworks.com/cli-docker/${{env.TEMP_TOKEN}}/method:amd64-${{ env.CORTEX_CLI_VERSION }}
      #    docker tag distributions.traps.paloaltonetworks.com/cli-docker/${{env.TEMP_TOKEN}}/method:amd64-${{ env.CORTEX_CLI_VERSION }} cortexcli:${{ env.CORTEX_CLI_VERSION }}

      # required if using CLI scanner
      - name: Download cortexcli
        run: |
          curl -s -o cortexcli $(curl -s "${{ secrets.CORTEX_API_URL }}/public_api/v1/unified-cli/releases/download-link?os=linux&architecture=amd64" \
            -H "x-xdr-auth-id: ${{ secrets.CORTEX_API_KEY_ID }}" -H "Authorization: ${{ secrets.CORTEX_API_KEY }}" | jq -r ".signed_url")
          chmod +x cortexcli
          ./cortexcli --version
          # ls -la .cortexcli
          # sudo apt-get update
          # sudo apt-get install -y libhyperscan5

      - name: Scan Code
        # run: echo "code scanner as Docker image"
        #run: |
        #  docker run --rm -v ${{ github.workspace }}:/home/code cortexcli:${{ env.CORTEX_CLI_VERSION }} \
        #    --api-base-url ${{ secrets.CORTEX_API_URL }} \
        #    --api-key ${{ secrets.CORTEX_API_KEY }} \
        #    --api-key-id ${{ secrets.CORTEX_API_KEY_ID }} \
        #    code scan \
        #    --directory /home/code \
        #    --repo-id ${{github.repository}} \
        #    --branch ${{github.ref_name}} \
        #    --source 'GITHUB_ACTIONS' \
        #    --create-repo-if-missing
        # alternatively, using CLI scanner ...
        run: |
          ./cortexcli \
            --api-base-url ${{ secrets.CORTEX_API_URL }} \
            --api-key ${{ secrets.CORTEX_API_KEY }} \
            --api-key-id ${{ secrets.CORTEX_API_KEY_ID }} \
            code scan \
            --directory ${{ github.workspace }} \
            --repo-id ${{github.repository}} \
            --branch ${{github.ref_name}} \
            --source 'GITHUB_ACTIONS' \
            --create-repo-if-missing \
            --upload-mode upload

      # must save .tar ball for Cortex image scanner (!)
      - name: Build Image
        run: |
          docker build -t "${{ secrets.GAR_PREFIX }}/${{ secrets.GCP_PROJECT }}/${{ github.repository }}:${{ github.run_number }}" .
          # docker save -o /tmp/image.tar ${{ secrets.GAR_PREFIX }}/${{ secrets.GCP_PROJECT }}/${{ github.repository }}:${{ github.run_number }}
        # run: docker build -t "quay.io/mmurhamm/${{ github.repository }}:${{ github.run_number }}" .

      - name: Test Image
        run: |
          docker images |grep ${{ github.repository }}
          echo "Tests passed."

      # required for scanning images when using CLI scanner - doc says JDK 11 (!)
      #- name: Set up Java
      #  uses: actions/setup-java@v4
      #  with:
      #    distribution: 'temurin' # See 'Supported distributions' for available options
      #    java-version: '21'
      
      # java is already installed in runner (referenced via JAVA_HOME) ...
      #- name: Verify Java Version
      #  run: java -version

      - name: Scan Image
        # run: echo "Image scanner currently not working as Docker image ..."
        #run: |
        #  docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v ${{ github.workspace }}:/home/code cortexcli:${{ env.CORTEX_CLI_VERSION }} \
        #    --api-base-url ${{ secrets.CORTEX_API_URL }} \
        #    --api-key ${{ secrets.CORTEX_API_KEY }} \
        #    --api-key-id ${{ secrets.CORTEX_API_KEY_ID }} \
        #    image scan ${{ secrets.GAR_PREFIX }}/${{ secrets.GCP_PROJECT }}/${{ github.repository }}:${{ github.run_number }} \
        #    --ci-pipeline-id ${{ github.workflow }} \
        #    --ci-build-id ${{ github.run_number }} \
        #    --name /home/code/${{ github.repository }}.${{ github.run_number }} \
        #    --output-format json \
        #    --timeout 240
        # alternatively, use CLI scanner, must scan .tar archive, not image directly (1)
        run: |
          ./cortexcli \
            --api-base-url ${{ secrets.CORTEX_API_URL }} \
            --api-key ${{ secrets.CORTEX_API_KEY }} \
            --api-key-id ${{ secrets.CORTEX_API_KEY_ID }} \
            image scan \
            --ci-pipeline-id "${{ github.workflow }}" \
            --ci-build-id ${{ github.run_number }} \
            --name "${{ secrets.GAR_PREFIX }}/${{ secrets.GCP_PROJECT }}/${{ github.repository }}:${{ github.run_number }}" \
            --output-format json \
            --timeout 240 \
            ${{ secrets.GAR_PREFIX }}/${{ secrets.GCP_PROJECT }}/${{ github.repository }}:${{ github.run_number }}
            #cat /tmp/cortexcli-*.log
            #--log-level ERROR \
            #--upload-mode upload \
                      
      - name: Archive Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: image-scan-report
          path: /tmp/${{ github.repository }}-${{ github.run_number }}-scan.json
          retention-days: 20                                                # 90 is the default          

      - name: Generate Image SBOM
        # run: echo "Image scanner currently not working as Docker image ..."
        #run: |
        #  docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v ${{ github.workspace }}:/home/code cortexcli:${{ env.CORTEX_CLI_VERSION }} \
        #    --api-base-url ${{ secrets.CORTEX_API_URL }} \
        #    --api-key ${{ secrets.CORTEX_API_KEY }} \
        #    --api-key-id ${{ secrets.CORTEX_API_KEY_ID }} \
        #    image sbom ${{ secrets.GAR_PREFIX }}/${{ secrets.GCP_PROJECT }}/${{ github.repository }}:${{ github.run_number }} \
        #    --output-file /home/code/${{ github.repository }}.${{ github.run_number }}.sbom \
        #    --fields author, binaries, license, name, purl, sourcePackage, type, version
        # alternatively, use CLI scanner ...
        run: |
          ./cortexcli \
            --api-base-url ${{ secrets.CORTEX_API_URL }} \
            --api-key ${{ secrets.CORTEX_API_KEY }} \
            --api-key-id ${{ secrets.CORTEX_API_KEY_ID }} \
            image sbom \
            --output-file /artifacts/${{ github.repository }}-${{ github.run_number }}-sbom.json \
            ${{ secrets.GAR_PREFIX }}/${{ secrets.GCP_PROJECT }}/${{ github.repository }}:${{ github.run_number }}
            # threw error:
            # open /tmp/mrauferx/helloprisma-41-sbom.json: no such file or directory - why?
            # threw error: 
            # invalid flag: fields, value: , must be one of (author, binaries, license, name, purl, sourcePackage, type, version)
            # doc says: Multiple fields can be specified. Values: author, binaries, license, name, purl, sourcePackage, type, version - how?
            #--fields author, binaries, license, name, purl, sourcePackage, type, version \
            # --log-level ERROR

      - name: Archive Image SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-manifests
          path: /artifacts/${{ github.repository }}-${{ github.run_number }}-sbom.json
          retention-days: 20                                                # 90 is the default

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'                # SA with access to registry and cluster

      # Google Cloud SDK is already installed in runner ...
      #- name: Verify Google Cloud SDK
      #  run: gcloud version

      #- name: Set up Google Cloud SDK
      #  uses: google-github-actions/setup-gcloud@v2
      #  with:
      #    project_id: ${{ secrets.GCP_PROJECT }}                            # gcp project name 
      #    install_components: 'gke-gcloud-auth-plugin'                      # for kube auth to work

      - name: Push Image to Registry
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}                           # gcp project name 
        run: |
          gcloud auth configure-docker ${{ secrets.GAR_PREFIX }}
          docker push ${{ secrets.GAR_PREFIX }}/${{ secrets.GCP_PROJECT }}/${{ github.repository }}:${{ github.run_number }}
      #  env:
      #    QUAY_USER: ${{ secrets.QUAY_USER }}
      #    QUAY_PW: ${{ secrets.QUAY_PW }}
      #  run: echo "docker push quay.io/mmurhamm/${{ github.repository }}:${{ github.run_number }} ..."
      #  run: |
      #    docker login quay.io -u ${{ secrets.QUAY_USER }} -p ${{ secrets.QUAY_PW }}
      #    docker push quay.io/mmurhamm/${{ github.repository }}:${{ github.run_number }}

      # install google-cloud-cli-gke-gcloud-auth-plugin because it is not installed by default in the runner
      - name: Install gke-gcloud-auth-plugin
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}                           # gcp project name 
        run: |
          # gcloud components install gke-gcloud-auth-plugin
          # gcloud components list
          # curl -LO https://storage.googleapis.com/gke-gcloud-auth-plugin/releases/latest/linux/amd64/gke-gcloud-auth-plugin
          # chmod +x gke-gcloud-auth-plugin
          # sudo mv gke-gcloud-auth-plugin /usr/local/bin/
          # gke-gcloud-auth-plugin --version
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | \
          sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | \
          sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install google-cloud-cli-gke-gcloud-auth-plugin
          # gke-gcloud-auth-plugin --version

      - name: Deploy Application to GKE
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}                           # gcp project name 
       #   GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
       #   QUAY_USER: ${{ secrets.QUAY_USER }}
       #   QUAY_PW: ${{ secrets.QUAY_PW }}          
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GCP_PROJECT }}
          # gcloud auth configure-docker ${{ secrets.GAR_PREFIX }}
          helm upgrade \
          ${{ github.event.repository.name }} \
          helm \
          --install \
          --create-namespace \
          --namespace ${{ github.event.repository.name }} \
          --set image.repository=${{ secrets.GAR_PREFIX }}/${{ secrets.GCP_PROJECT }}/${{ github.repository }} \
          --set image.tag=${{ github.run_number }} \
          --set dockerConfigJson.data="$(cat ~/.docker/config.json | base64 -w 0)"
       #   --set imageCredentials.username=${{ secrets.QUAY_USER }} \
       #   --set imageCredentials.password=${{ secrets.QUAY_PW }} \
       #   --set imageCredentials.repositoryUriPrefix=quay.io \
       #   --set imageCredentials.registry=quay.io
